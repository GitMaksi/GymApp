@page "/workoutpage"
@using GymApp.Domain.Entities
@using GymApp.Domain.Enums
@using GymApp.Infrastructure.Infrastructure
@using Microsoft.EntityFrameworkCore
@using GymApp.Infrastructure.Persistence
@using System.Text.Json
@inject IWebHostEnvironment Env
@inject PostgresDbContext Db

<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;600&display=swap" rel="stylesheet">
<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
        font-family: 'Orbitron', sans-serif;
        margin: 0;
        padding: 0;
    }

    .background-logo {
        position: fixed;
        top: 30px;
        right: 30px;
        opacity: 0.03;
        z-index: 0;
        width: 300px;
    }

    .container {
        max-width: 700px;
        margin: 0 auto;
        padding: 16px;
        background-color: #1e1e1e;
        border-radius: 12px;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.05);
        position: relative;
        z-index: 1;
    }

    .logo-wrapper {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .logo {
        max-width: 150px;
        height: auto;
        opacity: 0.85;
    }

    h3, h4 {
        margin-top: 30px;
        margin-bottom: 10px;
        color: #ffffff;
        text-align: center;
    }

    .section {
        margin-top: 40px;
        margin-bottom: 30px;
    }

    .divider {
        border: none;
        height: 2px;
        background-color: #333;
        margin: 30px 0;
    }

    .exercise-header {
        margin-top: 30px;
        font-size: 24px;
        text-align: center;
        border-bottom: 2px solid #555;
        padding-bottom: 8px;
        margin-bottom: 20px;
    }

    .exercise-set {
        margin-bottom: 10px;
    }

    select, input[type="text"], input[type="number"], button, textarea {
        width: 100%;
        margin-bottom: 10px;
        padding: 10px;
        font-size: 16px;
        border-radius: 8px;
        border: 1px solid #444;
        background-color: #2b2b2b;
        color: #ffffff;
        box-sizing: border-box;
    }

    .btn-danger {
        background-color: #e74c3c;
        color: white;
        border: none;
    }

    .btn-success {
        background-color: #2ecc71;
        color: white;
        border: none;
        margin-top: 20px;
    }

    .shake {
        animation: shake 0.3s;
    }

    @@keyframes shake {
        0% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        50% {
            transform: translateX(5px);
        }

        75% {
            transform: translateX(-5px);
        }

        100% {
            transform: translateX(0);
        }
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        color: #ffffff;
    }

    th, td {
        text-align: left;
        padding: 12px;
        vertical-align: top;
    }

    .summary-box {
        background-color: #1b1b1b;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
    }
</style>

<img src="/images/gym-logo.png" class="background-logo" alt="Gym Tracker Logo" />

<div class="container">
    <h3>Nowy trening</h3>

    <select @bind-value="selectedDay" @bind-value:event="onchange">
        @foreach (TrainingDayType day in Enum.GetValues(typeof(TrainingDayType)))
        {
            <option value="@day">@day.ToString()</option>
        }
    </select>

    <button @onclick="LoadOrCreateWorkout">Nowy trening</button>

    @if (workout != null)
    {
        <button class="btn btn-success @(shouldShakeButton ? "shake" : "")" @onclick="LoadPreviousWorkoutValues">Załaduj poprzednie wartości</button>

        <div style="text-align: center; margin-top: 20px;">
            <button class="btn btn-success" @onclick="ToggleExerciseInput">Dodaj ćwiczenie</button>
        </div>

        @if (showAddExerciseInput)
        {
            <div class="fade-slide">
                <input @bind="exerciseName" @ref="exerciseInputRef" placeholder="Nazwa ćwiczenia" class="exercise-input @(shouldShake ? "shake" : "")" />
                <button @onclick="AddExercise">Dodaj</button>
            </div>
        }

        <h4>Ćwiczenia:</h4>
        <table>
            <thead>
                <tr>
                    <th>Nazwa</th>
                    <th>Serie</th>
                    <th>Usuń</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ex in workout.Exercises)
                {
                    <tr>
                        <td>@ex.Name</td>                   
                        <td>
                            @for (int i = 0; i < ex.Sets.Count; i++)
                            {
                                var set = ex.Sets.ToArray()[i];
                                <div style="display: flex; align-items: center; gap: 6px; margin-bottom: 6px;">
                                    <input type="number" value="@set.Reps" @onchange="e => UpdateSetReps(set, e)" style="width: 50px;" />
                                    <span>/</span>
                                    <input type="number" value="@set.Weight" @onchange="e => UpdateSetWeight(set, e)" style="width: 60px;" />
                                    <span>kg</span>
                                </div>
                            }
                        </td>
                        <td><button class="btn btn-danger" @onclick="() => RemoveExercise(ex.Id)">Usuń</button></td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-success" @onclick="SaveWorkout">Zakończ i zapisz trening</button>
    }
    else if (showSummary)
    {
        <div class="summary-box">
            <h4>🎉 Gratulacje! Trening zakończony.</h4>
            <textarea placeholder="Wpisz podsumowanie dnia treningowego..." rows="4"></textarea>
        </div>
    }
</div>

<div class="logo-wrapper">
    <img src="images/gym-logo.png" alt="Gym Tracker Logo" class="logo" />
</div>

@code {
    private TrainingDayType selectedDay;
    private Workout? workout;
    private Workout? previousWorkout;
    private string exerciseName;
    private Dictionary<Guid, string> exerciseNameInputs = new();
    private bool showSummary = false;
    private bool shouldShake = false;
    private bool shouldShakeButton = false;
    private bool showAddExerciseInput = false;
    private ElementReference exerciseInputRef;

    private readonly List<int> defaultReps = new() { 8, 8, 7, 6 };
    private const string WorkoutSnapshotKey = "workout_snapshot";

    private bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isFirstRender)
        {
            isFirstRender = false;
            await LoadSnapshotAsync();
            StateHasChanged();
        }
    }

    async Task LoadOrCreateWorkout()
    {
        showSummary = false;
        workout = new Workout(selectedDay) { Date = DateTime.UtcNow };

        if (StaticBaseWorkouts.Days.TryGetValue(selectedDay.ToString(), out var exerciseNames))
        {
            foreach (var name in exerciseNames)
            {
                var ex = new Exercise(name);
                for (int i = 0; i < 4; i++)
                    ex.Sets.Add(new SetEntity { Reps = defaultReps[i], Weight = 0 });

                ex.Sets = ex.Sets.OrderByDescending(s => s.Reps).ToList();
                workout.Exercises.Add(ex);
            }
        }

        exerciseNameInputs = workout.Exercises.ToDictionary(e => e.Id, e => e.Name);

        previousWorkout = await Db.Workouts
            .Where(w => w.TrainingDay == selectedDay)
            .OrderByDescending(w => w.Date)
            .Include(w => w.Exercises)
            .ThenInclude(e => e.Sets)
            .FirstOrDefaultAsync();

        await SaveSnapshotAsync();
    }

    async Task LoadPreviousWorkoutValues()
    {
        if (workout == null || previousWorkout == null)
        {
            shouldShakeButton = true;
            StateHasChanged();
            await Task.Delay(500);
            shouldShakeButton = false;
            StateHasChanged();

            await JS.InvokeVoidAsync("alert", "Brak poprzedniego treningu do załadowania!");
            return;
        }

        foreach (var prevEx in previousWorkout.Exercises)
        {
            var currentEx = workout.Exercises.FirstOrDefault(e => e.Name == prevEx.Name);
            if (currentEx == null)
            {
                currentEx = new Exercise(prevEx.Name);
                workout.Exercises.Add(currentEx);
            }

            currentEx.Sets.Clear();
            foreach (var prevSet in prevEx.Sets.OrderByDescending(s => s.Reps))
            {
                currentEx.Sets.Add(new SetEntity
                {
                    Reps = prevSet.Reps,
                    Weight = prevSet.Weight
                });
            }

            currentEx.Sets = currentEx.Sets.OrderByDescending(s => s.Reps).ToList();
        }

        await SaveSnapshotAsync();
    }

    async Task SaveWorkout()
    {
        if (workout == null) return;

        Db.Workouts.Add(workout);
        await Db.SaveChangesAsync();

        await ClearSnapshotAsync();

        workout = null;
        exerciseName = string.Empty;
        exerciseNameInputs.Clear();
        showSummary = true;
    }

    async Task AddExercise()
    {
        if (workout == null || string.IsNullOrWhiteSpace(exerciseName))
        {
            shouldShake = true;
            StateHasChanged();
            await Task.Delay(300);
            shouldShake = false;
            StateHasChanged();
            return;
        }

        var ex = new Exercise(exerciseName);
        for (int i = 0; i < 4; i++)
            ex.Sets.Add(new SetEntity { Reps = defaultReps[i], Weight = 0 });

        ex.Sets = ex.Sets.OrderByDescending(s => s.Reps).ToList();

        workout.AddExercise(ex);
        exerciseNameInputs[ex.Id] = ex.Name;

        exerciseName = string.Empty;
        showAddExerciseInput = false;

        await SaveSnapshotAsync();
    }

    async Task RemoveExercise(Guid exerciseId)
    {
        if (workout == null) return;

        var exercise = workout.Exercises.FirstOrDefault(e => e.Id == exerciseId);
        if (exercise == null) return;

        workout.Exercises.Remove(exercise);
        await SaveSnapshotAsync();
    }

    async Task UpdateSetReps(SetEntity set, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int reps))
        {
            set.Reps = reps;
            await SortAllSetsAndSave();
        }
    }

    async Task UpdateSetWeight(SetEntity set, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double weight))
        {
            set.Weight = weight;
            await SaveSnapshotAsync();
        }
    }

    void ToggleExerciseInput()
    {
        showAddExerciseInput = !showAddExerciseInput;
    }

    private async Task SortAllSetsAndSave()
    {
        foreach (var ex in workout.Exercises)
        {
            ex.Sets = ex.Sets.OrderByDescending(s => s.Reps).ToList();
        }

        await SaveSnapshotAsync();
    }

    private async Task SaveSnapshotAsync()
    {
        if (workout != null)
        {
            var json = JsonSerializer.Serialize(workout);
            await JS.InvokeVoidAsync("localStorage.setItem", WorkoutSnapshotKey, json);
        }
    }

    private async Task LoadSnapshotAsync()
    {
        var json = await JS.InvokeAsync<string>("localStorage.getItem", WorkoutSnapshotKey);
        if (!string.IsNullOrWhiteSpace(json))
        {
            workout = JsonSerializer.Deserialize<Workout>(json);
            showSummary = false;
            showAddExerciseInput = false;
            exerciseName = string.Empty;
            exerciseNameInputs = workout.Exercises.ToDictionary(e => e.Id, e => e.Name);

            foreach (var ex in workout.Exercises)
            {
                ex.Sets = ex.Sets.OrderByDescending(s => s.Reps).ToList();
            }
        }
    }

    private async Task ClearSnapshotAsync()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", WorkoutSnapshotKey);
    }

    [Inject]
    private IJSRuntime JS { get; set; }
}
