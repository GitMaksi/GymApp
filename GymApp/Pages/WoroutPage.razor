@page "/workoutpage"
@using GymApp.Domain.Entities
@using GymApp.Domain.Enums
@using GymApp.Infrastructure.Infrastructure
@using Microsoft.EntityFrameworkCore
@using GymApp.Infrastructure.Persistence
@using System.Text.Json
@inject PostgresDbContext Db

<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
        font-family: sans-serif;
    }

    .container {
        max-width: 700px;
        margin: 0 auto;
        padding: 16px;
        background-color: #1e1e1e;
        border-radius: 12px;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.05);
    }

    h3, h4 {
        margin-top: 20px;
        margin-bottom: 10px;
        color: #ffffff;
    }

    select, input[type="text"], input[type="number"], button, textarea {
        width: 100%;
        margin-bottom: 10px;
        padding: 10px;
        font-size: 16px;
        border-radius: 8px;
        border: 1px solid #444;
        background-color: #2b2b2b;
        color: #ffffff;
        box-sizing: border-box;
    }

        select:focus, input:focus, button:focus, textarea:focus {
            outline: none;
            border-color: #888;
        }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        color: #ffffff;
    }

    th, td {
        text-align: left;
        padding: 12px;
        vertical-align: top;
    }

    .btn-danger {
        background-color: #e74c3c;
        color: white;
        border: none;
    }

    .btn-success {
        background-color: #2ecc71;
        color: white;
        border: none;
        margin-top: 20px;
    }

        .btn-danger:hover,
        .btn-success:hover {
            opacity: 0.9;
        }

    .summary-box {
        background-color: #1b1b1b;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
    }

    @@media (max-width: 600px) {
        th, td {
            font-size: 14px;
            padding: 8px;
        }

        input[type="number"] {
            font-size: 14px;
            padding: 6px;
        }

        button {
            font-size: 14px;
        }
    }
</style>

<div class="container">
    <h3>Nowy trening</h3>

    <select @bind-value="selectedDay" @bind-value:event="onchange">
        @foreach (TrainingDayType day in Enum.GetValues(typeof(TrainingDayType)))
        {
            <option value="@day">@day.ToString()</option>
        }
    </select>
    <button @onclick="LoadOrCreateWorkout">Nowy trening</button>

    @if (workout != null)
    {
        <h4>Dodaj ćwiczenie:</h4>
        <input @bind="exerciseName" placeholder="Nazwa ćwiczenia" />
        <button @onclick="AddExercise">Dodaj</button>

        <h4>Ćwiczenia:</h4>
        <table>
            <thead>
                <tr>
                    <th>Nazwa</th>
                    <th>Zmień nazwę</th>
                    <th>4 Serie</th>
                    <th>Usuń</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ex in workout.Exercises.ToList())
                {
                    <tr style="border-top: 1px solid #ccc;">
                        <td>@ex.Name</td>
                        <td>
                            <input type="text" value="@exerciseNameInputs[ex.Id]" @onchange="e => OnExerciseNameChanged(ex.Id, e)" />
                        </td>
                        <td>
                            @for (int i = 0; i < 4; i++)
                            {
                                var set = ex.Sets.ElementAtOrDefault(i);
                                if (set == null)
                                {
                                    set = new SetEntity { Reps = 0, Weight = 0 };
                                    ex.Sets.Add(set);
                                }

                                double? previousWeight = null;
                                if (previousWorkout != null)
                                {
                                    var previousExercise = previousWorkout.Exercises.FirstOrDefault(e => e.Name == ex.Name);
                                    if (previousExercise != null && previousExercise.Sets.Count > i)
                                    {
                                        var sets = previousExercise.Sets.ToArray();
                                        if (sets.Length > 0)
                                        previousWeight = sets[i].Weight;
                                    }
                                }

                                var diff = previousWeight.HasValue ? set.Weight - previousWeight.Value : (double?)null;

                                <div style="display: flex; align-items: center; gap: 6px; margin-bottom: 6px;">
                                    <input type="number" value="@set.Reps" @onchange="e => UpdateSetReps(set, e)" style="width: 55px;" />
                                    <span>/</span>
                                    <input type="number" value="@set.Weight" @onchange="e => UpdateSetWeight(set, e)" style="width: 60px;" />
                                    <span>kg</span>
                                    @if (diff.HasValue && diff.Value != 0)
                                    {
                                        <span style="color:@(diff > 0 ? "green" : "red")">
                                            @(diff > 0 ? $"+{diff} ↑" : $"{diff} ↓")
                                        </span>
                                    }
                                </div>
                            }
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => RemoveExercise(ex.Id)">Usuń</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-success" @onclick="SaveWorkout">Zakończ i zapisz trening</button>
    }
    else if (showSummary)
    {
        <div class="summary-box">
            <h4>🎉 Gratulacje! Trening zakończony.</h4>
            <textarea placeholder="Wpisz podsumowanie dnia treningowego..." rows="4"></textarea>
        </div>
    }
</div>

@code {
    private TrainingDayType selectedDay;
    private Workout? workout;
    private Workout? previousWorkout;
    private string exerciseName;
    private Dictionary<Guid, string> exerciseNameInputs = new();
    private bool showSummary = false;

    async Task LoadOrCreateWorkout()
    {
        showSummary = false;

        workout = new Workout(selectedDay)
        {
            Date = DateTime.UtcNow.Date
        };

        var sameDayWorkouts = await Db.Workouts
            .Where(w => w.TrainingDay == selectedDay && w.Date.Date == DateTime.UtcNow.Date)
            .ToListAsync();

        var postfix = sameDayWorkouts.Count + 1;
        if (postfix > 1)
            workout.CustomName = $"{selectedDay} - {postfix}";

        var configPath = Path.Combine(Environment.CurrentDirectory, "wwwroot", "data", "baseExercises.json");
        if (File.Exists(configPath))
        {
            var json = await File.ReadAllTextAsync(configPath);
            var config = JsonSerializer.Deserialize<Dictionary<string, List<string>>>(json);

            var key = selectedDay.ToString();
            if (config != null && config.TryGetValue(key, out var exerciseNames))
            {
                foreach (var name in exerciseNames)
                {
                    var ex = new Exercise(name);
                    for (int i = 0; i < 4; i++)
                        ex.Sets.Add(new SetEntity { Reps = 0, Weight = 0 });
                    workout.Exercises.Add(ex);
                }
            }
        }

        exerciseNameInputs = workout.Exercises.ToDictionary(e => e.Id, e => e.Name);
    }

    async Task SaveWorkout()
    {
        if (workout == null) return;

        Db.Workouts.Add(workout);
        await Db.SaveChangesAsync();

        workout = null;
        exerciseName = string.Empty;
        exerciseNameInputs.Clear();
        showSummary = true;
    }

    async Task AddExercise()
    {
        if (workout == null || string.IsNullOrWhiteSpace(exerciseName)) return;

        var ex = new Exercise(exerciseName);
        for (int i = 0; i < 4; i++)
            ex.Sets.Add(new SetEntity { Reps = 0, Weight = 0 });

        workout.AddExercise(ex);
        exerciseNameInputs[ex.Id] = ex.Name;

        await Db.SaveChangesAsync();
        exerciseName = string.Empty;
    }

    async Task RemoveExercise(Guid exerciseId)
    {
        if (workout == null) return;

        var exercise = workout.Exercises.FirstOrDefault(e => e.Id == exerciseId);
        if (exercise == null) return;

        workout.Exercises.Remove(exercise);
        await Db.SaveChangesAsync();
    }

    async Task UpdateSetReps(SetEntity set, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int reps))
        {
            set.Reps = reps;
            await Db.SaveChangesAsync();
        }
    }

    async Task UpdateSetWeight(SetEntity set, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double weight))
        {
            set.Weight = weight;
            await Db.SaveChangesAsync();
        }
    }

    async Task OnExerciseNameChanged(Guid exerciseId, ChangeEventArgs e)
    {
        if (workout == null) return;

        var newName = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(newName)) return;

        var exercise = workout.Exercises.FirstOrDefault(e => e.Id == exerciseId);
        if (exercise == null) return;

        exercise.ChangeName(newName);
        exerciseNameInputs[exerciseId] = newName;

        await Db.SaveChangesAsync();
    }
}
