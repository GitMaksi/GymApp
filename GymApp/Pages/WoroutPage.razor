@page "/workoutpage"
@using GymApp.Domain.Entities
@using GymApp.Domain.Enums
@using GymApp.Infrastructure.Infrastructure
@using Microsoft.EntityFrameworkCore
@using GymApp.Infrastructure.Persistence
@inject IWebHostEnvironment Env
@inject PostgresDbContext Db

<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;600&display=swap" rel="stylesheet">
<style>
    body {
        background-color: #121212;
        color: #e0e0e0;
        font-family: 'Orbitron', sans-serif;
    }

    .container {
        max-width: 700px;
        margin: 0 auto;
        padding: 16px;
        background-color: #1e1e1e;
        border-radius: 12px;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.05);
    }

    h3, h4 {
        margin-top: 20px;
        margin-bottom: 10px;
        color: #ffffff;
    }

    select, input[type="text"], input[type="number"], button, textarea {
        width: 100%;
        margin-bottom: 10px;
        padding: 10px;
        font-size: 16px;
        border-radius: 8px;
        border: 1px solid #444;
        background-color: #2b2b2b;
        color: #ffffff;
        box-sizing: border-box;
    }

        .exercise-input:focus, select:focus, input:focus, button:focus, textarea:focus {
            outline: none;
            border-color: #888;
        }

    .exercise-input {
        background-color: #2c2c2c;
        border: 1px solid #555;
        color: #eee;
    }

    .shake {
        animation: shake 0.3s;
    }

    @@keyframes shake {
        0% {
            transform: translateX(0);
        }

        25% {
            transform: translateX(-5px);
        }

        50% {
            transform: translateX(5px);
        }

        75% {
            transform: translateX(-5px);
        }

        100% {
            transform: translateX(0);
        }
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        color: #ffffff;
    }

    th, td {
        text-align: left;
        padding: 12px;
        vertical-align: top;
    }

    .btn-danger {
        background-color: #e74c3c;
        color: white;
        border: none;
    }

    .btn-success {
        background-color: #2ecc71;
        color: white;
        border: none;
        margin-top: 20px;
    }

    .summary-box {
        background-color: #1b1b1b;
        padding: 20px;
        border-radius: 8px;
        margin-top: 20px;
    }

    .comparison {
        margin-top: 16px;
        padding: 10px;
        background-color: #262626;
        border-radius: 8px;
        border: 1px solid #333;
    }

        .comparison span {
            display: block;
            margin-bottom: 6px;
        }
</style>

<div class="container">
    <h3>Nowy trening</h3>

    <select @bind-value="selectedDay" @bind-value:event="onchange">
        @foreach (TrainingDayType day in Enum.GetValues(typeof(TrainingDayType)))
        {
            <option value="@day">@day.ToString()</option>
        }
    </select>
    <button @onclick="LoadOrCreateWorkout">Nowy trening</button>

    @if (workout != null)
    {
        <h4>Dodaj ćwiczenie:</h4>
        <input @bind="exerciseName" @ref="exerciseInputRef" placeholder="Nazwa ćwiczenia" class="exercise-input @(shouldShake ? "shake" : "")" />
        <button @onclick="AddExercise">Dodaj</button>

        <h4>Ćwiczenia:</h4>
        <table>
            <thead>
                <tr>
                    <th>Nazwa</th>
                    <th>Zmień nazwę</th>
                    <th>Serie</th>
                    <th>Usuń</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ex in workout.Exercises)
                {
                    <tr>
                        <td>@ex.Name</td>
                        <td><input type="text" value="@exerciseNameInputs[ex.Id]" @onchange="e => OnExerciseNameChanged(ex.Id, e)" /></td>
                        <td>
                            @for (int i = 0; i < 4; i++)
                            {
                                var set = ex.Sets.ElementAt(i);
                                double? prevWeight = null;

                                var prevEx = previousWorkout?.Exercises.FirstOrDefault(e => e.Name == ex.Name);
                                if (prevEx != null && prevEx.Sets.Count > i)
                                {
                                    var prevExSets = prevEx.Sets.ToArray();
                                    prevWeight = prevExSets[i].Weight;
                                }

                                var diff = prevWeight.HasValue ? set.Weight - prevWeight.Value : (double?)null;

                                <div style="display: flex; align-items: center; gap: 6px; margin-bottom: 6px;">
                                    <input type="number" value="@set.Reps" @onchange="e => UpdateSetReps(set, e)" style="width: 50px;" />
                                    <span>/</span>
                                    <input type="number" value="@set.Weight" @onchange="e => UpdateSetWeight(set, e)" style="width: 60px;" />
                                    <span>kg</span>
                                    @if (diff.HasValue && diff.Value != 0)
                                    {
                                        <span style="color:@(diff > 0 ? "lightgreen" : "red")">
                                            @(diff > 0 ? $"+{diff} ↑" : $"{diff} ↓")
                                        </span>
                                    }
                                </div>
                            }
                        </td>
                        <td><button class="btn btn-danger" @onclick="() => RemoveExercise(ex.Id)">Usuń</button></td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-success" @onclick="SaveWorkout">Zakończ i zapisz trening</button>
    }
    else if (showSummary)
    {
        <div class="summary-box">
            <h4>🎉 Gratulacje! Trening zakończony.</h4>
            <textarea placeholder="Wpisz podsumowanie dnia treningowego..." rows="4"></textarea>

            @if (previousWorkout != null)
            {
                <div class="comparison">
                    <h4>📊 Porównanie z poprzednim treningiem:</h4>
                    @foreach (var ex in previousWorkout.Exercises)
                    {
                        var currentEx = lastWorkout?.Exercises.FirstOrDefault(e => e.Name == ex.Name);
                        if (currentEx == null)
                        {
                            <span><b>@ex.Name:</b> brak w aktualnym treningu ❌</span>
                        }
                        else
                        {
                            int diffSets = currentEx.Sets.Count - ex.Sets.Count;
                            double totalWeightPrev = ex.Sets.Sum(s => s.Weight);
                            double totalWeightNow = currentEx.Sets.Sum(s => s.Weight);
                            double weightDiff = totalWeightNow - totalWeightPrev;

                            <span>
                                <b>@ex.Name:</b>
                                Serie: <span style="color:@(diffSets > 0 ? "lightgreen" : diffSets < 0 ? "tomato" : "gray")">
                                    @(diffSets > 0 ? $"+{diffSets} ↑" : diffSets < 0 ? $"{diffSets} ↓" : "0 =")
                                </span>
                                &nbsp;&nbsp;
                                Ciężar: <span style="color:@(weightDiff > 0 ? "lightgreen" : weightDiff < 0 ? "tomato" : "gray")">
                                    @(weightDiff > 0 ? $"+{weightDiff}kg ↑" : weightDiff < 0 ? $"{weightDiff}kg ↓" : "0kg =")
                                </span>
                            </span>
                        }
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private TrainingDayType selectedDay;
    private Workout? workout;
    private Workout? previousWorkout;
    private Workout? lastWorkout;
    private string exerciseName;
    private Dictionary<Guid, string> exerciseNameInputs = new();
    private bool showSummary = false;
    private bool shouldShake = false;
    private ElementReference exerciseInputRef;

    async Task LoadOrCreateWorkout()
    {
        showSummary = false;

        previousWorkout = await Db.Workouts
            .Where(w => w.TrainingDay == selectedDay && w.Date < DateTime.UtcNow.Date)
            .OrderByDescending(w => w.Date)
            .FirstOrDefaultAsync();

        workout = new Workout(selectedDay) { Date = DateTime.UtcNow.Date };

        var key = selectedDay.ToString();
        if (StaticBaseWorkouts.Days.TryGetValue(key, out var exerciseNames))
        {
            foreach (var name in exerciseNames)
            {
                var ex = new Exercise(name);
                var prevEx = previousWorkout?.Exercises.FirstOrDefault(e => e.Name == name).Sets.ToArray();

                for (int i = 0; i < 4; i++)
                {
                    var reps = i switch { 0 => 8, 1 => 8, 2 => 7, _ => 6 };
                    var weight = prevEx != null && prevEx.Count() > i ? prevEx[i].Weight : 0;
                    ex.Sets.Add(new SetEntity { Reps = reps, Weight = weight });
                }

                workout.Exercises.Add(ex);
            }
        }

        exerciseNameInputs = workout.Exercises.ToDictionary(e => e.Id, e => e.Name);
    }

    async Task SaveWorkout()
    {
        if (workout == null) return;

        Db.Workouts.Add(workout);
        await Db.SaveChangesAsync();

        lastWorkout = workout;
        workout = null;
        exerciseName = string.Empty;
        exerciseNameInputs.Clear();
        showSummary = true;
    }

    async Task AddExercise()
    {
        if (workout == null || string.IsNullOrWhiteSpace(exerciseName))
        {
            shouldShake = true;
            StateHasChanged();
            await Task.Delay(300);
            shouldShake = false;
            StateHasChanged();
            return;
        }

        var ex = new Exercise(exerciseName);
        for (int i = 0; i < 4; i++)
        {
            var reps = i switch { 0 => 8, 1 => 8, 2 => 7, _ => 6 };
            ex.Sets.Add(new SetEntity { Reps = reps, Weight = 0 });
        }

        workout.AddExercise(ex);
        exerciseNameInputs[ex.Id] = ex.Name;

        await Db.SaveChangesAsync();
        exerciseName = string.Empty;
    }

    async Task RemoveExercise(Guid exerciseId)
    {
        if (workout == null) return;

        var exercise = workout.Exercises.FirstOrDefault(e => e.Id == exerciseId);
        if (exercise == null) return;

        workout.Exercises.Remove(exercise);
        await Db.SaveChangesAsync();
    }

    async Task UpdateSetReps(SetEntity set, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int reps))
        {
            set.Reps = reps;
            await Db.SaveChangesAsync();
        }
    }

    async Task UpdateSetWeight(SetEntity set, ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double weight))
        {
            set.Weight = weight;
            await Db.SaveChangesAsync();
        }
    }

    async Task OnExerciseNameChanged(Guid exerciseId, ChangeEventArgs e)
    {
        if (workout == null) return;

        var newName = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(newName)) return;

        var exercise = workout.Exercises.FirstOrDefault(e => e.Id == exerciseId);
        if (exercise == null) return;

        exercise.ChangeName(newName);
        exerciseNameInputs[exerciseId] = newName;

        await Db.SaveChangesAsync();
    }
}
